@page
@using IsikUn.IncubationCentre.Localization
@using IsikUn.IncubationCentre.Permissions
@using IsikUn.IncubationCentre.Web.Pages.Projects
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal
@model AssignMentorModalModel
@inject IStringLocalizer<IncubationCentreResource> L
@{
    Layout = null;
}


<abp-modal centered="true" scrollable="true" size="ExtraLarge">
    <abp-modal-header title="@L["AssignMentor"].Value"></abp-modal-header>
    <abp-modal-body>
        <div class="mb-3">
            <label class="form-label" for="Project_Name">@L["ProjectName"].Value</label>
            <input type="text" id="Project_Name" disabled name="Project.Name" value="@(Model.Project.Name)" class="form-control valid" aria-invalid="false">
        </div>
        <div class="mb-3">
            <label class="form-label" for="Project_Name">@L["Entreprenur"].Value</label>
            @if(Model.Project.Entrepreneurs != null && Model.Project.Entrepreneurs.Count() > 0 && Model.Project.Entrepreneurs.FirstOrDefault().IdentityUser != null && Model.Project.Entrepreneurs.FirstOrDefault().IdentityUser.Name != null && Model.Project.Entrepreneurs.FirstOrDefault().IdentityUser.Surname != null)
            {
                <input type="text" id="Project_Name" disabled name="Project.Name" value="@(Model.Project.Entrepreneurs.FirstOrDefault().IdentityUser.Name) @(Model.Project.Entrepreneurs.FirstOrDefault().IdentityUser.Surname)" class="form-control valid" aria-invalid="false">
            }
            else
            {
                <input type="text" id="Project_Name" disabled name="Project.Name" value="-" class="form-control valid" aria-invalid="false">
            }
        </div>
        <div class="mb-3">
            <label class="form-label" for="Project_Name">@L["ProjectTags"].Value</label>
            <input type="text" id="Project_Name" disabled name="Project.Name" value="@Model.Project.Tags" class="form-control valid" aria-invalid="false">
        </div>
        <div class="mb-3">
            <label class="form-label" for="Project_Name">@L["CreationTime"].Value</label>
            <input type="text" id="Project_Name" disabled name="Project.Name" value="@Model.Project.CreationTime.ToString("dd/MM/yyyy")" class="form-control valid" aria-invalid="false">
        </div>
        <hr/>
        <div>
            <abp-table striped-rows="true" id="AvailableMentorsTable"></abp-table>
        </div>
    </abp-modal-body>
    <abp-modal-footer buttons="@(AbpModalButtons.Cancel|AbpModalButtons.Save)"></abp-modal-footer>
</abp-modal>



<script>
    $(function(){
        var l = abp.localization.getResource('IncubationCentre');
        $("#Project_EntreprenurId").parent("div").hide();
        $("#Project_Status").parent("div").hide();
        $("#Project_Tags").attr("placeholder",`@L["YouCanAddNewTagWithEnterOrComma"]`);
        var inputTags = document.querySelector("#Project_Tags");
        var tagify = new Tagify(inputTags, {
          originalInputValueFormat: valuesArr => valuesArr.map(item => item.value).join(',')
        });


        var dataTable = $('#AvailableMentorsTable').DataTable(
            abp.libs.datatables.normalizeConfiguration({
                serverSide: true,
                paging: true,
                order: [[1, "asc"]],
                searching: true,
                scrollX: true,
                ajax: abp.libs.datatables.createAjax(isikUn.incubationCentre.mentors.mentor.getList),
                columnDefs: [
                    {
                        title: l('Actions'),
                        rowAction: {
                            items:
                                [
                                    {
                                        text: l('AssignMentor'),
                                        visible:
                                            abp.auth.isGranted('IncubationCentre.SystemManagers'),
                                        confirmMessage: function (data) {
                                            return l(
                                                'AssigningMentorConfirmMessage',
                                                '@(Model.Project.Name)'.toUpperCase(),data.record.identityUser.name.toUpperCase() + " " + data.record.identityUser.surname.toUpperCase()
                                            );
                                        },
                                        action: function (data) {
                                            isikUn.incubationCentre.projects.project
                                                .assignMentor('@Model.projectId',data.record.id)
                                                .then(function () {
                                                    abp.notify.info(
                                                        l('SuccessfullyAssigned')
                                                    );
                                                    if(page.defines.MentorAssignmentTable != undefined && page.defines.MentorAssignmentTable != null){
                                                        page.defines.MentorAssignmentTable.ajax.reload();
                                                    }
                                                    dataTable.ajax.reload();
                                                });
                                        }
                                    }
                                ]
                        }
                    },
                    {
                        title: l('Name'),
                        data: "identityUser.name"
                    },
                    {
                        title: l('Surname'),
                        data: "identityUser.surname"
                    },
                    {
                        title: l('NumOfMentoringProjects'),
                        data: "mentoringProjects",
                        render:function(data){
                            return data != null ? data.length : 0;
                        }
                    },
                    {
                        title: l('Skills'),
                        data: "skills",
                        render: function (data) {
                            var text = "";
                            data.map(x => x.name).forEach(function (skill) {
                                text += `<span class="badge badge-info me-2">${skill}</span>`
                            });
                            return text == "" ? "-" : text;
                        }
                    }
                ]
            })
        );
      
    });
</script>