@page
@using IsikUn.IncubationCentre.Localization
@using IsikUn.IncubationCentre.Permissions
@using IsikUn.IncubationCentre.Web.Pages.Mentors
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<IncubationCentreResource> L
@inject IAuthorizationService AuthorizationService
@model DashboardModel
@{
}
@section scripts
    {
<abp-script src="/Pages/Mentors/Dashboard.js" />
}

<style>
    .info-area .border-bottom {
        padding-top: 10px;
    }

    #RequestsArea thead, #RequestsArea tbody {
        display: block;
    }

    #RequestsArea tbody {
        height: 242px;
        overflow-y: auto;
        overflow-x: hidden;
    }

    body ::-webkit-scrollbar {
        width: 9px;
    }

    body ::-webkit-scrollbar-track {
        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5);
        border-radius: 6px;
    }

    body ::-webkit-scrollbar-thumb {
        border-radius: 6px;
        -webkit-box-shadow: inset 0 0 6px #626262e8;
    }

    .badge-testColor {
        background-color: #f9ddff;
    }

</style>

<abp-row>
    <abp-column size="_12">
        <abp-card>
            <abp-card-header>
                <abp-card-title class="d-inline-block">
                    @L["Requests"].Value
                </abp-card-title>
                <abp-button id="NewRequestButton"
                            text="@L["NewRequest"].Value"
                            icon="plus"
                            class="float-end"
                            button-type="Primary" />

            </abp-card-header>
            <abp-card-body>
                <abp-row id="RequestsArea">
                    <abp-column size-sm="_12" size-md="_6" size-lg="_6" size-xl="_6">
                        <abp-card-title class="border-bottom me-2">
                            @L["Recived"].Value
                        </abp-card-title>
                        <div>
                            @if (Model.ReceivedRequests != null && Model.ReceivedRequests.Count() > 0)
                            {
                                <table style="width:100%">
                                    <tbody class="pe-2">

                                        <tr>
                                            <th style="width:41%">@L["Title"].Value</th>
                                            <th style="width:31%">@L["Sender"].Value</th>
                                            <th style="width:28%">@L["Date"].Value</th>
                                            <th style="width:28%">@L["Explanation"].Value</th>
                                        </tr>
                                        @for (var i = 0; i < Model.ReceivedRequests.Count(); i++)
                                        {
                                            <tr>
                                                <td class="py-2" data-long-name="true" data-long-name-size="18" data-target="open-reuquest-detail" data-id="@Model.ReceivedRequests[i].Id"> @(!string.IsNullOrEmpty(Model.ReceivedRequests[i].Title) ? Model.ReceivedRequests[i].Title : "-")</td>
                                                @if (Model.ReceivedRequests[i].Sender != null &&
                                               Model.ReceivedRequests[i].Sender.IdentityUser != null &&
                                               !string.IsNullOrEmpty(Model.ReceivedRequests[i].Sender.IdentityUser.Name) &&
                                               !string.IsNullOrEmpty(Model.ReceivedRequests[i].Sender.IdentityUser.Surname)
                                               )
                                                {
                                                    <td class="py-2" data-long-name="true" data-long-name-size="12">@string.Format("{0} {1}",Model.ReceivedRequests[i].Sender.IdentityUser.Name, Model.ReceivedRequests[i].Sender.IdentityUser.Surname)</td>
                                                }
                                                else
                                                {
                                                    <td class="py-2">-</td>
                                                }
                                                <td class="py-2">@(Model.ReceivedRequests[i].CreationTime.ToString("dd/MM/yyyy HH:MM"))</td>
                                                <td class="py-2" data-long-name="true" data-long-name-size="18"> @(!string.IsNullOrEmpty(Model.ReceivedRequests[i].Explanation) ? Model.ReceivedRequests[i].Explanation : "-")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <div class="text-center my-5">
                                    <span class="alert alert-info">@L["NoFoundRecivedRequests"]</span>
                                </div>
                            }
                        </div>

                    </abp-column>
                    <abp-column size-sm="_12" size-md="_6" size-lg="_6" size-xl="_6">
                        <abp-card-title class="border-bottom me-2">
                            @L["Sent"].Value
                        </abp-card-title>
                        <div>
                            @if (Model.SentRequests != null && Model.SentRequests.Count() > 0)
                            {
                                <table style="width:100%">
                                    <tbody class="pe-2">

                                        <tr>
                                            <th style="width:41%">@L["Title"].Value</th>
                                            <th style="width:31%">@L["Receiver"].Value</th>
                                            <th style="width:28%">@L["Date"].Value</th>
                                            <th style="width:28%">@L["Explanation"].Value</th>
                                        </tr>
                                        @for (var i = 0; i < Model.SentRequests.Count(); i++)
                                        {
                                            <tr>
                                                <td class="py-2" data-long-name="true" data-long-name-size="18" data-target="open-reuquest-detail" data-id="@Model.SentRequests[i].Id"> @(!string.IsNullOrEmpty(Model.SentRequests[i].Title) ? Model.SentRequests[i].Title : "-")</td>
                                                @if (Model.SentRequests[i].Receiver != null &&
                                               Model.SentRequests[i].Receiver.IdentityUser != null &&
                                               !string.IsNullOrEmpty(Model.SentRequests[i].Receiver.IdentityUser.Name) &&
                                               !string.IsNullOrEmpty(Model.SentRequests[i].Receiver.IdentityUser.Surname)
                                               )
                                                {
                                                    <td class="py-2" data-long-name="true" data-long-name-size="12">@string.Format("{0} {1}",Model.SentRequests[i].Receiver.IdentityUser.Name, Model.SentRequests[i].Receiver.IdentityUser.Surname)</td>
                                                }
                                                else
                                                {
                                                    <td class="py-2">-</td>
                                                }
                                                <td class="py-2">@(Model.SentRequests[i].CreationTime.ToString("dd/MM/yyyy HH:MM"))</td>
                                                <td class="py-2" data-long-name="true" data-long-name-size="18"> @(!string.IsNullOrEmpty(Model.SentRequests[i].Explanation) ? Model.SentRequests[i].Explanation : "-")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <div class="text-center my-5">
                                    <span class="alert alert-info">@L["NoFoundSentRequests"]</span>
                                </div>
                            }
                        </div>
                    </abp-column>
                </abp-row>
            </abp-card-body>
        </abp-card>
    </abp-column>

    <abp-column size="_12">
        <abp-card>
            <abp-card-header>
                <abp-card-title>
                    @L["MyMentoringProjects"].Value
                </abp-card-title>
            </abp-card-header>

            <abp-card-body>
                <abp-table striped-rows="true" id="MentoringProjects"></abp-table>
            </abp-card-body>
        </abp-card>
    </abp-column>

     <abp-column size="_12">
        <abp-card>
            <abp-card-header>
                <abp-card-title>
                    @L["Events"].Value
                </abp-card-title>
                <abp-button id="NewEventButton"
                            text="@L["NewEvent"].Value"
                            icon="plus"
                            class="float-end"
                            button-type="Primary" />
            </abp-card-header>
            <abp-card-body>
                <div>
                    <abp-table striped-rows="true" id="EventsTable"></abp-table>
                </div>
            </abp-card-body>
        </abp-card>
    </abp-column>
</abp-row>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        var l = abp.localization.getResource('IncubationCentre');
        var dataTable = $('#MentoringProjects').DataTable(
            abp.libs.datatables.normalizeConfiguration({
                serverSide: true,
                paging: true,
                order: [[1, "asc"]],
                searching: true,
                scrollX: true,
                ajax: abp.libs.datatables.createAjax(
                    isikUn.incubationCentre.projects.project.getListByMentor,
                    function() {
                        return {
                            "id" : "@Model.CurrentUser.Id"
                        }
                    }
                ),
                columnDefs: [
                    { // TODO this the part that needs to be changed
                        title: l('Actions'),
                        rowAction: {
                            items:
                                [
                                    {
                                        text: l('Detail'),
                                        visible:
                                            abp.auth.isGranted('IncubationCentre.Projects'),
                                        action: function (data) {
                                            location.href = "/Projects/Detail?id="+data.record.id;
                                        }
                                    }
                                ]
                        }
                    },
                    {
                        title: l('Name'),
                        data: "name"
                    },
                    {
                        title: l('Status'),
                        data: "status",
                        render: function (data) {
                            return l("Enum:ProjectStatus_" + data);
                        }
                    },
                    {
                        title: l('CompletionDate'),
                        data: "completionDate",
                        render: function (data) {
                            if (data == null) return "-";
                            try {
                                var date = new Date(data).toLocaleDateString();
                                return date != "Invalid Date" ? date : "-";
                            } catch {
                                return "-";
                            }
                        }
                    },
                    {
                        title: l('Tags'),
                        data: "tags",
                        render: function (data) {
                            if (data == null) return "-";
                            var text = "";
                            data.split(",").forEach(function (tag) {
                                text += `<span class="badge badge-info me-2">${tag}</span>`
                            });
                            return text == "" ? "-" : text;
                        }
                    },
                    {
                        title: l('SharePerInvest'),
                        data: "sharePerInvest",
                        render: function (data) {
                            return data + " %";
                        }
                    },
                    {
                        title: l('InvesmentReady'),
                        data: "invesmentReady",
                        render: function (data) {
                            return data ? `<span class="badge badge-success p-2">${l('Yes')}</span>` : `<span class="badge badge-danger p-2">${l('No')}</span>`
                        }
                    },
                    {
                        title: l('OpenForInvesment'),
                        data: "openForInvesment",
                        render: function (data) {
                            return data ? `<span class="badge badge-success p-2">${l('Yes')}</span>` : `<span class="badge badge-danger p-2">${l('No')}</span>`
                        }
                    }
                ]
        }));

        var mentoringProjectIds = @(Json.Serialize(Model.CurrentUser.MentoringProjects != null ? Model.CurrentUser.MentoringProjects.Select(a => a.Id) : new string[] {"00000000-0000-0000-0000-000000000000"}));

        var createEventModal = new abp.ModalManager(abp.appPath + 'Events/CreateModal');
        var editEventModal = new abp.ModalManager(abp.appPath + 'Events/EditModal');

        var eventsTable = $('#EventsTable').DataTable(abp.libs.datatables.normalizeConfiguration({
            processing: true,
            serverSide: true,
            paging: true,
            searching: false,
            autoWidth: false,
            scrollCollapse: true,
            order: [[0, "asc"]],
            ajax: abp.libs.datatables.createAjax(isikUn.incubationCentre.events.event.getList,{projectIds : mentoringProjectIds}),
            columnDefs: [
                {
                    rowAction: {
                        items:
                            [ // TODO : create new event button goes here

                                {
                                    text: l('Edit'),
                                    visible: function (data) {
                                        debugger;
                                        return data.creatorPerson.identityUserId == abp.currentUser.id
                                    },
                                    action: function (data) {
                                        editEventModal.open({ id: data.record.id });
                                    }
                                },
                                {
                                    text: l('Delete'),
                                    visible: function (data) {
                                        debugger;
                                        return data.creatorPerson.identityUserId == abp.currentUser.id
                                    },
                                    confirmMessage: function (data) {
                                        return l('EntityDeletionConfirmationMessage', data.record.title);
                                    },
                                    action: function (data) {
                                        isikUn.incubationCentre.events.event.delete(data.record.id)
                                            .then(function () {
                                                abp.notify.info(l('SuccessfullyDeleted'));
                                                dataTable.ajax.reload();
                                            });
                                    }
                                }
                            ]
                    }
                },
                {
                    title: l('Title'),
                    data: "title"
                },
                {
                    title: l('Date'),
                    data: "eventDate",
                    render: function (data) {
                        if (data == null) return "-";
                        try {
                            var date = new Date(data).toLocaleDateString();
                            return date != "Invalid Date" ? date : "-";
                        } catch {
                            return "-";
                        }
                    }
                },
                {
                    title: l('Description'),
                    data: "description"
                },
                {
                    title: l('ProjectName'),
                    data: "project",
                    render: function (data) {
                        if (data == null) return "-";
                        if (data.name == null) return "-";
                        return data.name;
                    }

                },

            ]
        }));
        $('#NewEventButton').click(function (e) {
            e.preventDefault();
            createEventModal.open();
        });

        createEventModal.onResult(function () {
            eventsTable.ajax.reload();
        });

        editEventModal.onResult(function () {
            eventsTable.ajax.reload();
        });
    });
</script>